S <- cov(X)
E <- eigen(X)
E <- eigen(S)
xbar <- colMeans(X)
ones <- rep(1, n)
H.X <- X - ones %*% t(xbar)
s <- apply(X, 2, sd)
X.S <- sweep(H.X, 2, s, "/")
S.S <- cov(X.S)
L <- diag(eigen(S.S)$values)
diag(L)/sum(diag(L))
plot(cumsum(diag(L))/sum(diag(L)), type = "b", main = "Scree Plot for PCA")
G <- eigen(S.S)$vectors
Y <- X.S %*% G
ranking <- order(Y[,1], decreasing = TRUE)
rec[ranking, 1]
row.names(Y) <- rec[,1]
View(Y)
plot(V2~V1, data = Y)
with(Y[,1:2], text(V2~V1, labels = row.names[Y]), pos =3)
with(Y[,1:2], text(V2~V1, labels = row.names[Y]), pos =3)
plot(V2~V1, data = Y)
text(V2~V1, labels = row.names[Y])
library(calibrate)
plot(V2~V1, data = Y)
plot(V2~V1, data = Y)
texty(Y[,2], Y[,1], labels = row.names[Y])
plot(V2~V1, data = Y)
textxy(Y[,2], Y[,1], labels = row.names[Y])
textxy(Y[,2], Y[,1], labels = row.names(Y))
plot(V2~V1, data = Y)
textxy(Y[,2], Y[,1], labels = row.names(Y))
plot(V2~V1, data = Y)
textxy(Y[,2], Y[,1], row.names(Y))
plot(V2~V1, data = Y)
textxy(Y[,1], Y[,2], row.names(Y))
View(rec)
Z[,1] <- 100/rec[,1]
Z <- Null()
Z <- matrix(null)
Z <- matrix(Null)
Z <- matrix(NULL)
Z <- matrix(data = NULL, nrow = n, ncol = p)
Z <- matrix(data = NA, nrow = n, ncol = p)
Z[,1] <- 100/rec[,1]
View(rec)
Z[,1] <- 100/rec[,2]
Z[,2] <- 200/rec[,3]
Z[,3] <- 400/rec[,4]
z[,4] <- 800/(rec[,5]*60)
Z[,4] <- 800/(rec[,5]*60)
Z[,5] <- 1500/(rec[,6]*60)
View(Z)
Z[,7] <- 42195/(rec[,8]*60)
Z[,6] <- 3000/(rec[,7]*60)
zbar <- colMeans(Z)
H.Z <- Z - ones %*% t(zbar)
S.Z <- cor(H.Z)
L <- diag(eigen(S.Z)$values)
diag(L)/sum(diag(L))
plot(cumsum(diag(L))/sum(diag(L)), type = "b", main = "Scree Plot for PCA")
G.Z <- eigen(S.Z)$vectors
A <- S.Z %*% G.Z
ranking <- order(A[,1], decreasing = TRUE)
rec[ranking, 1]
A <- H.Z %*% G.Z
ranking <- order(A[,1], decreasing = TRUE)
rec[ranking, 1]
ranking <- order(A[,1], decreasing = TRUE)
rec[ranking, 1]
ranking <- order(A[,1])
rec[ranking, 1]
row.names(A) <- rec[,1]
plot(V2~V1, data = A)
textxy(A[,1], A[,2], row.names(A))
plot(V2~V1, data = A)
textxy(A[,1], A[,2], row.names(A))
sapply(rec, class)
R <- matrix(c(1, 0.6832, 0.2412, 0.0586, 0.6328, 1, -0.0553, 0.0655, 0.2412, -0.0553, 1, 0.4248, 0.0586, 0.0655, 0.4248, 1), nrow = 4, byrow = T)
R <- matrix(c(1, 0.6832, 0.2412, 0.0586, 0.6328, 1, -0.0553, 0.0655, 0.2412, -0.0553, 1, 0.4248, 0.0586, 0.0655, 0.4248, 1), nrow = 4, byrow = T)
R
Rxx.invsqrt <- sp$vectors %*% diag(1/sqrt(sp$values)) %*% t(sp$vectors)
R.xx <- R[1:2, 1:2]
R.xy <- R[1:2, 3:4]
R.yy <- R[3:4, 3:4]
rp <- eigen(R.xx)
Rxx.invsqrt <- rp$vectors %*% diag(1/sqrt(rp$values)) %*% t(rp$vectors)
rp1 <- eigen(R.yy)
rp1 <- eigen(R.yy)
Ryy.invsqrt <- rp1$vectors %*% diag(1/sqrt(rp1$values)) %*% t(rp1$vectors)
K.hat <- Rxx.invsqrt %*% R.xy %*% Ryy.invsqrt
GLD <- svd(K.hat)
A.hat <- t(GLD$u) %*% Rxx.invsqrt
B.hat <- t(GLD$v) %*% Ryy.invsqrt
A.hat
GLD$d
R.xx
R.xy
R.yy
rp
R <- matrix(c(1, 0.6328, 0.2412, 0.0586, 0.6328, 1, -0.0553, 0.0655, 0.2412, -0.0553, 1, 0.4248, 0.0586, 0.0655, 0.4248, 1), nrow = 4, byrow = T)
R.xx <- R[1:2, 1:2]
R.xy <- R[1:2, 3:4]
R.yy <- R[3:4, 3:4]
rp <- eigen(R.xx)
Rxx.invsqrt <- rp$vectors %*% diag(1/sqrt(rp$values)) %*% t(rp$vectors)
rp1 <- eigen(R.yy)
Ryy.invsqrt <- rp1$vectors %*% diag(1/sqrt(rp1$values)) %*% t(rp1$vectors)
K.hat <- Rxx.invsqrt %*% R.xy %*% Ryy.invsqrt
GLD <- svd(K.hat)
A.hat <- t(GLD$u) %*% Rxx.invsqrt
B.hat <- t(GLD$v) %*% Ryy.invsqrt
A.hat
1 - pchisq(-(n-(2+2+3)/2)*log(Lambda0),df=2*2)
n <- 140
lambda0 <- prod(1-(GLD$d)^2)
1 - pchisq(-(n-(2+2+3)/2)*log(Lambda0),df=2*2)
1 - pchisq(-(n-(2+2+3)/2)*log(lambda0),df=2*2)
k <- min(2,2)
lambda1 <- prod(1-(GLD$d[2:k])^2)
s1 <- 1
1 - pchisq(-(n-(2+2+3)/2)*log(lambda1),df=(2-s1)*(2-s1))
R2 <- matrix(c(1, 0.37, 0.21, 0.26, 0.33, 0.37, 1, 0.35, 0.67, 0.59, 0.21, 0.35, 1, 0.34, 0.34, 0.26, 0.67, 0.34, 1, 0.8, 0.33, 0.59, 0.34, 0.8, 1), nrow = 5, byrow = T)
R2
p2 <- 2
q2 <- 3
R2.xx <- R2[1:q2, 1:q2]
R2.xy <- R2[1:q2, (q2+1):(q2+p2)]
R2.yy <- R2[(q2+1):(q2+p2), (q2+1):(q2+p2)]
r2p <- eigen(R2.xx)
r2p2 <- eigen(R2.yy)
r2p <- eigen(R2.xx)
r2p1 <- eigen(R2.yy)
R2xx.invsqrt <- r2p$vectors %*% diag(1/sqrt(r2p$values)) %*% t(r2p$vectors)
R2yy.invsqrt <- r2p1$vectors %*% diag(1/sqrt(r2p1$values)) %*% t(r2p1$vectors)
K.hat2 <- R2xx.invsqrt %*% R2.xy %*% R2yy.invsqrt
GLD2 <- svd(K.hat2)
n <- 70
lambda2 <- prod(1-(GLD2$d)^2)
1 - pchisq(-(n-(p2+q2+3)/2)*log(lambda2),df=p2*q2)
k2 <- min(p2, q2)
lambda4 <- prod(1-(GLD2$d[2:k2])^2)
s2 <- 1
1 - pchisq(-(n-(p2+q2+3)/2)*log(lambda4),df=(p2-s2)*(q2-s2))
A.hat2 <- t(GLD2$u) %*% R2xx.invsqrt
B.hat2 <- t(GLD2$v) %*% R2yy.invsqrt
A.hat2[1, ]
B.hat2[1, ]
GLD2$d
setwd("D:/Columbia/5224/project")
t1 <- readline("Boy Scout Jamboree Speech.txt")
t1 <- readLines("Boy Scout Jamboree Speech.txt")
t2 <- readLines("Joint Address to Congress.txt")
dat <- data.frame(t1, t2)
dat <- data.frame(c(t1, t2))
View(dat)
dat <- data.frame(rbind(t1, t2))
dat <- list(t1, t2)
t1
dat <- matrix(NA, ncol =1, nrow = 2)
dat[1,1] <- t1
View(dat)
class(t1)
dat1 <- data.frame(dat)
dat1[1,1] <- t1
dat1$new <- t1
View(dat1)
t3 <- nlist(t1)
t3 <- unlist(t1)
t3
dat1$new[1] <- t1
View(dat1)
t1 <- paste0(("Boy Scout Jamboree Speech.txt", n = -1, skipNul = T))
t1 <- paste0(readLines("Boy Scout Jamboree Speech.txt", n = -1, skipNul = T))
dat[1,1] <- t1
t1 <- paste(readLines("Boy Scout Jamboree Speech.txt", n = -1, skipNul = T), paste = " ")
dat <- matrix(NA, ncol =1, nrow = 2)
dat[1,1] <- t1
t1 <- paste(readLines("Boy Scout Jamboree Speech.txt", n = -1, skipNul = T), collapse = " ")
dat <- matrix(NA, ncol =1, nrow = 2)
dat[1,1] <- t1
setwd("D:/Columbia/5224/project")
setwd("~/GitHub/Spring2018-Project4-group3")
ms_train <- read.csv("../data/data_sample/MS_sample/data_train.csv")
setwd("~/GitHub/Spring2018-Project4-group3/data")
ms_train <- read.csv("../data/data_sample/MS_sample/data_train.csv")
ind.c <- which(ms_train$V1 == "C")
test <- unique(ms_train[ind.c, 3])
View(ms_train)
ind.c <- c(ind.c, nrow(ms_train)+1)
num <- diff(ind.c)
ms_train$C <- rep(test, times = num)
ms_train1 <- ms_train[which(ms_train$V1 == "V"), -1]
View(ms_train1)
test2 <- dcast(ms_train1[,-1], C~V2)
library(reshape2)
test2 <- dcast(ms_train1[,-1], C~V2)
rownames(test2) <- test2$C
test3 <- ifelse(is.na(test2[,-1]) == T, 0, 1)
ms_train1 <- test3
getwd()
source("../lib/select_neighbor.R")
source("../lib/mae.R")
source("../lib/predict_score1.R")
load("../output/movie_vec_data.Rdata")
tuning_movie <- function(mo_train,mo_test,weight_mat,method){
if (method == "bestn"){
result <- rep(0,100)
for (i in 1:15){
n_para <- i * 2
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = F, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
} else if (method == "threshold") {
result <- rep(0,100)
for (i in 1:5){
thres_para <- i * 0.5
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = F,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
} else if (method == "combined") {
result <- matrix(rep(0,100),nrow = 20)
for (i in 1:15)
for (j in 1:5){
n_para <- i * 2
thres_para <- i * 0.5
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
}
}
tuning_movie(mo_train,mo_test, vec_weights,method = "threshold")
#save(vec_weights,mo_test,mo_train,file = "movie_vec_data.Rdata")
load("~/GitHub/Spring2018-Project4-group3/output/ms_test_wide.RData")
load("~/GitHub/Spring2018-Project4-group3/output/ms_train_wide.RData")
load("~/GitHub/Spring2018-Project4-group3/output/ms_train_wide.RData")
load("~/GitHub/Spring2018-Project4-group3/output/ms_train_wide.RData")
load("~/GitHub/Spring2018-Project4-group3/output/movie_train_w.RData")
load("~/GitHub/Spring2018-Project4-group3/output/movie_test_w.RData")
load("~/GitHub/Spring2018-Project4-group3/output/vec_weights.RData")
tuning_movie(mo_train,mo_test, vec_weights,method = "threshold")
tuning_movie <- function(mo_train,mo_test,weight_mat,method){
if (method == "bestn"){
result <- rep(0,100)
for (i in 1:15){
n_para <- i * 2
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = F, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
} else if (method == "threshold") {
result <- rep(0,100)
for (i in 1:5){
thres_para <- i * 0.5
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = F,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
print(result[i])
}
return(result)
} else if (method == "combined") {
result <- matrix(rep(0,100),nrow = 20)
for (i in 1:15)
for (j in 1:5){
n_para <- i * 2
thres_para <- i * 0.5
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
}
}
tuning_movie(mo_train,mo_test, vec_weights,method = "threshold")
result <- tuning_movie(mo_train,mo_test, vec_weights,method = "threshold")
tuning_movie <- function(mo_train,mo_test,weight_mat,method){
if (method == "bestn"){
result <- rep(0,100)
for (i in 1:15){
n_para <- i * 2
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = F, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
} else if (method == "threshold") {
result <- rep(0,100)
for (i in 1:5){
thres_para <- i * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = F,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
print(result[i])
}
return(result)
} else if (method == "combined") {
result <- matrix(rep(0,100),nrow = 20)
for (i in 1:15)
for (j in 1:5){
n_para <- i * 2
thres_para <- j * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
}
}
result <- tuning_movie(mo_train,mo_test, vec_weights,method = "threshold")
source("../lib/select_neighbor.R")
source("../lib/mae.R")
source("../lib/predict_score1.R")
load("../output/movie_vec_data.Rdata")
tuning_movie <- function(mo_train,mo_test,weight_mat,method){
if (method == "bestn"){
result <- rep(0,100)
for (i in 1:15){
n_para <- i * 2
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = F, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
} else if (method == "threshold") {
result <- rep(0,100)
for (i in 1:5){
thres_para <- i * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = F,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
print(result[i])
}
return(result)
} else if (method == "combined") {
result <- matrix(rep(0,100),nrow = 20)
for (i in 1:15)
for (j in 1:5){
n_para <- i * 2
thres_para <- j * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
}
}
result <- tuning_movie(mo_train,mo_test, vec_weights,method = "threshold")
source("../lib/select_neighbor.R")
source("../lib/mae.R")
source("../lib/predict_score1.R")
tuning_movie <- function(mo_train,mo_test,weight_mat,method){
if (method == "bestn"){
result <- rep(0,100)
for (i in 1:15){
n_para <- i * 2
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = F, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
} else if (method == "threshold") {
result <- rep(0,100)
for (i in 1:5){
thres_para <- i * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = F,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
print(result[i])
}
return(result)
} else if (method == "combined") {
result <- matrix(rep(0,100),nrow = 20)
for (i in 1:15)
for (j in 1:5){
n_para <- i * 2
thres_para <- j * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
}
}
result <- tuning_movie(mo_train,mo_test, vec_weights,method = "threshold")
#save(vec_weights,mo_test,mo_train,file = "movie_vec_data.Rdata")
tuning_movie <- function(mo_train,mo_test,weight_mat,method){
if (method == "bestn"){
result <- rep(0,100)
for (i in 1:15){
n_para <- i * 2
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = F, run.bestn = T,n =n_para,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
} else if (method == "threshold") {
result <- rep(0,100)
for (i in 1:5){
thres_para <- i * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = F,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
print(result[i])
}
return(result)
} else if (method == "combined") {
result <- matrix(rep(0,100),nrow = 20)
for (i in 1:15)
for (j in 1:5){
n_para <- i * 2
thres_para <- j * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = T,n =n_para,threshold = thres_para)
result[i,j] <- MAE(pred,mo_test)
}
return(result)
}
}
result <- tuning_movie(mo_train,mo_test, vec_weights,method = "combined")
result
save(result,file = "movie_vec_combine_result.Rdata")
result <- tuning_movie(mo_train,mo_test, vec_weights,method = "bestn")
tuning_movie <- function(mo_train,mo_test,weight_mat,method){
if (method == "bestn"){
result <- rep(0,100)
for (i in 1:15){
n_para <- i * 2
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = F, run.bestn = T,n =n_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
} else if (method == "threshold") {
result <- rep(0,100)
for (i in 1:5){
thres_para <- i * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = F,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
print(result[i])
}
return(result)
} else if (method == "combined") {
result <- matrix(rep(0,100),nrow = 20)
for (i in 1:15)
for (j in 1:5){
n_para <- i * 2
thres_para <- j * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = T,n =n_para,threshold = thres_para)
result[i,j] <- MAE(pred,mo_test)
}
return(result)
}
}
#result <- tuning_movie(mo_train,mo_test, vec_weights,method = "combined")
#save(vec_weights,mo_test,mo_train,file = "movie_vec_data.Rdata")
#save(result,file = "movie_vec_combine_result.Rdata")
result <- tuning_movie(mo_train,mo_test, vec_weights,method = "bestn")
result
movie_vec_bestn <- result[1:15]
movie_vec_bestn
save(movie_vec_bestn, file = "movie_vec_bestn_result.Rdata")
movie_vec_bestn
load("movie_vec_combine_result.Rdata")
result
tuning_movie <- function(mo_train,mo_test,weight_mat,method){
if (method == "bestn"){
result <- rep(0,100)
for (i in 1:5){
n_para <- 40 * i
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = F, run.bestn = T,n =n_para)
result[i] <- MAE(pred,mo_test)
}
return(result)
} else if (method == "threshold") {
result <- rep(0,100)
for (i in 1:5){
thres_para <- i * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = F,threshold = thres_para)
result[i] <- MAE(pred,mo_test)
print(result[i])
}
return(result)
} else if (method == "combined") {
result <- matrix(rep(0,100),nrow = 20)
for (i in 1:15)
for (j in 1:5){
n_para <- i * 2
thres_para <- j * 0.1
pred <- predict.score1(train = mo_train, test = mo_test,
weight = vec_weights, run.threshold = T, run.bestn = T,n =n_para,threshold = thres_para)
result[i,j] <- MAE(pred,mo_test)
}
return(result)
}
}
#result <- tuning_movie(mo_train,mo_test, vec_weights,method = "combined")
#save(vec_weights,mo_test,mo_train,file = "movie_vec_data.Rdata")
#save(result,file = "movie_vec_combine_result.Rdata")
result <- tuning_movie(mo_train,mo_test, vec_weights,method = "bestn")
result
getwd()
