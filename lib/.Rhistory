phi[,col] <- phi[,col]/row.sum
}
pi_mat <- phi
print(paste(iter, "E-step done!"))
# M-step
## Update mu
mu<- apply(pi_mat, 2, mean)/num_of_users
## Update gamma_array
for(c in 1:C){
for(j in 1:num_of_items){
l <- t(pi_mat[, c]) %*% data[, j]
gamma_array[2, j, c] <- l/sum(pi_mat[ ,c])
gamma_array[1, j, c] <- 1 - gamma_array[2, j, c]
}
}
print(paste(iter, "M-step done!"))
print(paste("Iteration", iter, "done!"))
if(norm(pi_mat - pi_mat_old) <= 0.1){
break()
}
}
return(list("mu"=mu, "gamma_array"=gamma_array, "pi_mat"=pi_mat))
}
load("ms_train_wide.RData")
trained.cluster.model <- train.cluster.model(train, C = 4)
train.cluster.model<- function(data, C, iterations=12){
# data <- train
# C=4
# set up
data[is.na(data)] <- 0
user <- data$user
list_of_users<- unique(data$user)
data <- data[,-1] #delete the user column
k <- c(0, 1) # different rating
num_of_users<- nrow(data)
num_of_items<- ncol(data)
list_of_items<- names(data)
data <- as.matrix(data)
# Initialize parameters
mu<- sample(c(1/100:10/100), C, replace = T)
mu<- mu/sum(mu)
gamma_array<- array(sample(c(1/100:10/100), 2*num_of_items*C, replace = T), dim=c(2, num_of_items, C))
for(d in 1:C){
col_sum <- colSums(gamma_array[, , d])
for (row in 1:nrow(gamma_array[, , d])) {
gamma_array[row,,d] <- gamma_array[row,,d]/col_sum
}
}
pi_mat<- matrix(0, nrow=num_of_users, ncol=C)
# pi_mat_old<- matrix(0, nrow=num_of_users, ncol=C)
phi <- matrix(NA, nrow = num_of_users, ncol = C)
print("Initialization is done!")
for(iter in 1:iterations){
pi_mat_old<- pi_mat
# E-step
## Update pi_mat
for (i in 1:num_of_users){
log_fi_prod<- rep(0, C)
for(j in 1:num_of_items){
log_fi_prod <- log_fi_prod +
log(gamma_array[data[i,j] + 1, j,])
}
phi[i, ] <- exp(log_fi_prod)
}
for (row in 1:nrow(phi)) {
phi[row,] <- phi[row,]*mu
}
row.sum <- rowSums(phi)
for (col in 1:ncol(phi)) {
phi[,col] <- phi[,col]/row.sum
}
pi_mat <- phi
print(paste(iter, "E-step done!"))
# M-step
## Update mu
mu<- apply(pi_mat, 2, mean)/num_of_users
## Update gamma_array
for(c in 1:C){
for(j in 1:num_of_items){
l <- t(pi_mat[, c]) %*% data[, j]
gamma_array[2, j, c] <- l/sum(pi_mat[ ,c])
gamma_array[1, j, c] <- 1 - gamma_array[2, j, c]
}
}
print(paste(iter, "M-step done!"))
print(paste("Iteration", iter, "done!"))
print(norm(pi_mat - pi_mat_old))
if(norm(pi_mat - pi_mat_old) <= 0.1){
break()
}
}
return(list("mu"=mu, "gamma_array"=gamma_array, "pi_mat"=pi_mat))
}
load("ms_train_wide.RData")
trained.cluster.model <- train.cluster.model(train, C = 4)
train.cluster.model<- function(data, C, iterations=30){
# data <- train
# C=4
# set up
data[is.na(data)] <- 0
user <- data$user
list_of_users<- unique(data$user)
data <- data[,-1] #delete the user column
k <- c(0, 1) # different rating
num_of_users<- nrow(data)
num_of_items<- ncol(data)
list_of_items<- names(data)
data <- as.matrix(data)
# Initialize parameters
mu<- sample(c(1/100:10/100), C, replace = T)
mu<- mu/sum(mu)
gamma_array<- array(sample(c(1/100:10/100), 2*num_of_items*C, replace = T), dim=c(2, num_of_items, C))
for(d in 1:C){
col_sum <- colSums(gamma_array[, , d])
for (row in 1:nrow(gamma_array[, , d])) {
gamma_array[row,,d] <- gamma_array[row,,d]/col_sum
}
}
pi_mat<- matrix(0, nrow=num_of_users, ncol=C)
# pi_mat_old<- matrix(0, nrow=num_of_users, ncol=C)
phi <- matrix(NA, nrow = num_of_users, ncol = C)
print("Initialization is done!")
for(iter in 1:iterations){
pi_mat_old<- pi_mat
# E-step
## Update pi_mat
for (i in 1:num_of_users){
log_fi_prod<- rep(0, C)
for(j in 1:num_of_items){
log_fi_prod <- log_fi_prod +
log(gamma_array[data[i,j] + 1, j,])
}
phi[i, ] <- exp(log_fi_prod)
}
for (row in 1:nrow(phi)) {
phi[row,] <- phi[row,]*mu
}
row.sum <- rowSums(phi)
for (col in 1:ncol(phi)) {
phi[,col] <- phi[,col]/row.sum
}
pi_mat <- phi
print(paste(iter, "E-step done!"))
# M-step
## Update mu
mu<- apply(pi_mat, 2, mean)/num_of_users
## Update gamma_array
for(c in 1:C){
for(j in 1:num_of_items){
l <- t(pi_mat[, c]) %*% data[, j]
gamma_array[2, j, c] <- l/sum(pi_mat[ ,c])
gamma_array[1, j, c] <- 1 - gamma_array[2, j, c]
}
}
print(paste(iter, "M-step done!"))
print(paste("Iteration", iter, "done!"))
print(norm(pi_mat - pi_mat_old))
if(norm(pi_mat - pi_mat_old) <= 0.1){
break()
}
}
return(list("mu"=mu, "gamma_array"=gamma_array, "pi_mat"=pi_mat))
}
load("ms_train_wide.RData")
trained.cluster.model <- train.cluster.model(train, C = 4)
train.cluster.model<- function(data, C, iterations=50){
# data <- train
# C=4
# set up
data[is.na(data)] <- 0
user <- data$user
list_of_users<- unique(data$user)
data <- data[,-1] #delete the user column
k <- c(0, 1) # different rating
num_of_users<- nrow(data)
num_of_items<- ncol(data)
list_of_items<- names(data)
data <- as.matrix(data)
# Initialize parameters
mu<- sample(c(1/100:10/100), C, replace = T)
mu<- mu/sum(mu)
gamma_array<- array(sample(c(1/100:10/100), 2*num_of_items*C, replace = T), dim=c(2, num_of_items, C))
for(d in 1:C){
col_sum <- colSums(gamma_array[, , d])
for (row in 1:nrow(gamma_array[, , d])) {
gamma_array[row,,d] <- gamma_array[row,,d]/col_sum
}
}
pi_mat<- matrix(0, nrow=num_of_users, ncol=C)
# pi_mat_old<- matrix(0, nrow=num_of_users, ncol=C)
phi <- matrix(NA, nrow = num_of_users, ncol = C)
print("Initialization is done!")
for(iter in 1:iterations){
pi_mat_old<- pi_mat
# E-step
## Update pi_mat
for (i in 1:num_of_users){
log_fi_prod<- rep(0, C)
for(j in 1:num_of_items){
log_fi_prod <- log_fi_prod +
log(gamma_array[data[i,j] + 1, j,])
}
phi[i, ] <- exp(log_fi_prod)
}
for (row in 1:nrow(phi)) {
phi[row,] <- phi[row,]*mu
}
row.sum <- rowSums(phi)
for (col in 1:ncol(phi)) {
phi[,col] <- phi[,col]/row.sum
}
pi_mat <- phi
print(paste(iter, "E-step done!"))
# M-step
## Update mu
mu<- apply(pi_mat, 2, mean)/num_of_users
## Update gamma_array
for(c in 1:C){
for(j in 1:num_of_items){
l <- t(pi_mat[, c]) %*% data[, j]
gamma_array[2, j, c] <- l/sum(pi_mat[ ,c])
gamma_array[1, j, c] <- 1 - gamma_array[2, j, c]
}
}
print(paste(iter, "M-step done!"))
print(paste("Iteration", iter, "done!"))
print(norm(pi_mat - pi_mat_old))
if(norm(pi_mat - pi_mat_old) <= 0.1){
break()
}
}
return(list("mu"=mu, "gamma_array"=gamma_array, "pi_mat"=pi_mat))
}
system.time(trained.cluster.model <- train.cluster.model(train, C = 4))
set.seed(123)
y <- rexp(0.5)
x <- sqrt(1+y)
mean(x*exp(-0.5)/sqrt(2*pi))
y <- rexp(0.5)
x <- sqrt(1+y)
x
y <- rexp(1000,0.5)
x <- sqrt(1+y)
mean(x*exp(-0.5)/sqrt(2*pi))
set.seed(123)
y <- rexp(1000,0.5)
x <- sqrt(1+y)
mean(x*exp(-0.5)/sqrt(2*pi))
set.seed(123)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed(123)
y <- rexp(1000,0.5)
x <- sqrt(1+y)
mean(x*exp(-0.5)/sqrt(2*pi))
sd(x*exp(-0.5)/sqrt(2*pi))/sqrt(1000)
set.seed(123)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed(123)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed(123)
y <- rexp(1000,0.5)
x <- sqrt(1+y)
mean(x*exp(-0.5)/sqrt(2*pi))
sd(x*exp(-0.5)/sqrt(2*pi))/sqrt(1000)
set.seed(13)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed(13)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed(13)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed(13)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed(13)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed(13)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed(123)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed()
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
#set.seed()
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
sqrt(1000)
set.seed(123)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd(((sqrt(pi)/2)*log(1+x))/(x^0.5))/sqrt(1000)
set.seed(123)
y <- rexp(1000,0.5)
x <- sqrt(1+y)
mean(x*exp(-0.5)/sqrt(2*pi))
sd(x*exp(-0.5)/sqrt(2*pi))/sqrt(1000)
x <- runif(1000)
sd(x)
sd(x^2)
x <- runif(1000)
sd(x)
sd(x^2)
x <- runif(1000)
sd(x)
sd(x^2)
x <- runif(1000)
sd(x)
sd(x^2)
x <- runif(1000)
sd(x)
sd(x^2)
x <- runif(1000)
sd(x)
sd(x^2)
x <- runif(1000)
sd(x)
sd(x^2)
x <- runif(1000)
sd(x)
sd(x^2)
x <- runif(1000)
sd(x)
sd(x^2)
set.seed(123)
U <- runif(1000)
x <- qnorm(pnorm(1)+U*(1-pnorm(1)))
mean((x^2)*(1-pnorm(1)))
sd((x^2)*(1-pnorm(1)))/sqrt(1000)
set.seed(123)
y <- rexp(1000,0.5)
x <- sqrt(1+y)
mean(x*exp(-0.5)/sqrt(2*pi))
sd(x*exp(-0.5)/sqrt(2*pi))/sqrt(1000)
setwd("~/Documents/GitHub/Spring2018-Project4-grp3/lib")
c(1,2,0,6)>0
all(c(1,2,0,6)>0)
source("../lib/cluster_model.R")
preprocess_for_cluster(preprocess.train = F, preprocess.test = F, reshape.train = F, reshape.test = F)
load("../output/ms_train_wide.RData")
load("../output/ms_test_wide.RData")
list_of_items <- names(train[,-1])
cross.validate.model.clustering <- T
if(cross.validate.model.clustering){
r <- c()
parameters <- c(4,5,6,7,8)
for(par in parameters){
trained.cluster.model <- train.cluster.model(train, C = par)
g <- trained.cluster.model$gamma_array
m <- trained.cluster.model$mu
p <- trained.cluster.model$pi_mat
testing <- test.cluster.model(test, gamma_array = g, mu = m, pi_mat = p, list_of_items = list_of_items)
r <- c(r, testing$r)
print(paste("For number of clusters equal to:", par, "Rank score:", testing$r))
}
t <- matrix(NA, ncol = length(parameters), nrow = 2)
t[1,] <- parameters
t[2,] <- r
rownames(t) <- c("C", "Rank Score")
save(t, file = "../output/cv_cluster_rank_score.Rdata")
}
load("../output/cv_cluster_rank_score.Rdata")
print(t)
best.C <- as.numeric(t[1, which.max(t[2,])])
best.rank.score <- as.numeric(max(t[2,]))
print(paste("The best cluster number is:", best.C, ". Rank score is:", best.rank.score))
source("../lib/cluster_model.R")
preprocess_for_cluster(preprocess.train = F, preprocess.test = F, reshape.train = F, reshape.test = F)
load("../output/ms_train_wide.RData")
load("../output/ms_test_wide.RData")
list_of_items <- names(train[,-1])
cross.validate.model.clustering <- F
if(cross.validate.model.clustering){
r <- c()
parameters <- c(4,5,6,7,8)
for(par in parameters){
trained.cluster.model <- train.cluster.model(train, C = par)
g <- trained.cluster.model$gamma_array
m <- trained.cluster.model$mu
p <- trained.cluster.model$pi_mat
testing <- test.cluster.model(test, gamma_array = g, mu = m, pi_mat = p, list_of_items = list_of_items)
r <- c(r, testing$r)
print(paste("For number of clusters equal to:", par, "Rank score:", testing$r))
}
t <- matrix(NA, ncol = length(parameters), nrow = 2)
t[1,] <- parameters
t[2,] <- r
rownames(t) <- c("C", "Rank Score")
save(t, file = "../output/cv_cluster_rank_score.Rdata")
}
load("../output/cv_cluster_rank_score.Rdata")
print(t)
best.C <- as.numeric(t[1, which.max(t[2,])])
best.rank.score <- as.numeric(max(t[2,]))
print(paste("The best cluster number is:", best.C, ". Rank score is:", best.rank.score))
source("../lib/cluster_model.R")
preprocess_for_cluster(preprocess.train = F, preprocess.test = F, reshape.train = F, reshape.test = F)
load("../output/ms_train_wide.RData")
load("../output/ms_test_wide.RData")
list_of_items <- names(train[,-1])
cross.validate.model.clustering <- F
if(cross.validate.model.clustering){
r <- c()
parameters <- c(4,5,6,7,8)
for(par in parameters){
trained.cluster.model <- train.cluster.model(train, C = par)
g <- trained.cluster.model$gamma_array
m <- trained.cluster.model$mu
p <- trained.cluster.model$pi_mat
testing <- test.cluster.model(test, gamma_array = g, mu = m, pi_mat = p, list_of_items = list_of_items)
r <- c(r, testing$r)
print(paste("For number of clusters equal to:", par, "Rank score:", testing$r))
}
t <- matrix(NA, ncol = length(parameters), nrow = 2)
t[1,] <- parameters
t[2,] <- r
rownames(t) <- c("C", "Rank Score")
save(t, file = "../output/cv_cluster_rank_score.Rdata")
}
load("../output/cv_cluster_rank_score.Rdata")
print(t)
best.C <- as.numeric(t[1, which.max(t[2,])])
best.rank.score <- as.numeric(max(t[2,]))
print(paste("The best cluster number is:", best.C, ". Rank score is:", best.rank.score))
