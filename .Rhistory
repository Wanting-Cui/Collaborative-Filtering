movie_train_raw <- read.csv('../data/data_sample/eachmovie_sample/data_train.csv',header = T)
movie_test_raw <- read.csv('../data/data_sample/eachmovie_sample/data_test.csv',header = T)
MS_train_raw <- read.csv('../data/data_sample/MS_sample/data_train.csv',header = T)
MS_test_raw <- read.csv('../data/data_sample/MS_sample/data_test.csv',header = T)
# Save wide ms data to Rdata
# Save wide movie data to Rdata
## train
dcast_train <- dcast(movie_train_raw, User~Movie)
library(reshape2)
# Save wide ms data to Rdata
# Save wide movie data to Rdata
## train
dcast_train <- dcast(movie_train_raw, User~Movie)
rownames(dcast_train) <- dcast_train$User
movie_train <- dcast_train[,-1]
## test
dcast_test <- dcast(movie_test_raw, User~Movie)
rownames(dcast_test) <- dcast_test$User
movie_test <- dcast_test[,-1]
## save file
savefile = FALSE
if(savefile == TRUE) save(movie_train,movie_test, file = '../output/movie_wide.RData')
# load vector similarity function
source('../lib/mat_weight.R')
run.vec = FALSE
#
mat_weight(data = movie_train,
run.vec = FALSE,
run.msd = FALSE,
save.csv = FALSE)
# Save wide ms data to Rdata
ind.c <- which(MS_train_raw$V1 == "C")
MS_train_raw <- read.csv('../data/data_sample/MS_sample/data_train.csv',header = T)
MS_test_raw <- read.csv('../data/data_sample/MS_sample/data_test.csv',header = T)
# Save wide ms data to Rdata
ind.c <- which(MS_train_raw$V1 == "C")
test <- unique(MS_train_raw[ind.c, 3])
test
head(MS_train_raw)
# Save wide ms data to Rdata
ind.c <- which(MS_train_raw$V1 == "C")
test <- unique(MS_train_raw[ind.c, 3])
ind.c <- c(ind.c, nrow(ms_train)+1)
ind.c <- c(ind.c, nrow(MS_train_raw)+1)
num <- diff(ind.c)
ms_train$C <- rep(test, times = num)
MS_train_raw$C <- rep(test, times = num)
ms_train <- ms_train[which(ms_train$V1 == "V"), -1]
ms_train <- MS_train_raw[which(MS_train_raw$V1 == "V"), -1]
# load vector similarity function
source('../lib/mat_weight.R')
# whether run vector similarity and whether save csv file
run.vec = FALSE
save.csv = FALSE
movie_vec_train <- mat_weight(data = movie_train_raw,
run.vec = run.vec,
run.msd = FALSE)
movie_vec_test <- mat_weight(data = movie_test_raw,
run.vec = run.vec,
run.msd = FALSE)
unique(MS_train_raw[ind.c, 3])
ind.c
ind.c
dcast(ms_train1[,-1], C~V2)
# Save wide ms data to Rdata
source('./lib/preprocess.R')
# Save wide ms data to Rdata
source('../lib/preprocess.R')
# ms data
source('../lib/preprocess.R')
# load vector similarity function
source('../lib/mat_weight.R')
# whether run vector similarity and whether save csv file
run.vec = FALSE
save.rd = FALSE
movie_vec_weight <- mat_weight(data = movie_train_raw,
run.vec = run.vec,
run.msd = FALSE)
# save output in RData
if(save.rd == TRUE) save(movie_vec_weight, file = '../output/movie_vec_weight.RData')
# load output data
load('../output/movie_vec_weight.RData')
# whether run vector similarity and whether save csv file
run.vec = FALSE
save.rd = FALSE
ms_vec_weight <- mat_weight(data = ms_train,
run.vec = run.vec,
run.msd = FALSE)
# save output in RData
if(save.rd == TRUE) save(ms_vec_weight, file = '../output/ms_vec_weight.RData')
# load output data
load('../output/ms_vec_weight.RData')
# whether run vector similarity and whether save csv file
run.msd = FALSE
save.rd = FALSE
movie_msd_weight <- mat_weight(data = movie_train_raw,
run.vec = FALSE,
run.msd = run.msd)
# save output in RData
if(save.rd == TRUE) save(movie_msd_weight, file = '../output/movie_msd_weight.RData')
# load output data
load('../output/movie_msd_weight.RData')
1/matrix(1:9,3)
1/matrix(1:9,3)
0.1:0.5
seq(0.1,0.5,by = 0.1)
bestn <- seq(2, 30, by = 2)
bestn
ms_train[110,]
names(ms_train)[110]
colnames(ms_train)[110]
select_neighbor(1110, ms_vec_weight,
run.threshold = T,
run.bestn = T,
para = list(threshold = 0.3,n = 2)
)
select_neighbor <- function(userid, weight_mat,
run.threshold = FALSE,
run.bestn = FALSE,
para = list(threshold = 0.3,n = 10)){
if(is.null(rownames(weight_mat))) rownames(weight_mat) <- colnames(weight_mat)
if(is.null(colnames(weight_mat))) colnames(weight_mat) <- rownames(weight_mat)
if (run.bestn == TRUE & run.threshold == FALSE){
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
name_v <- names(sort(vec,decreasing = T))[1:para$n]
} else if (run.bestn == FALSE & run.threshold == TRUE){
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
name_v <- names(abs(vec) > para$threshold)
} else if (run.bestn == TRUE & run.threshold == TRUE){
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
vec <- vec[abs(vec) > para$threshold]
name_v <- names(sort(vec,decreasing = T))[1:min(para$n,length(vec))]
}
return(name_v)
}
#mat <- readRDS("ms_vec_train.RData")
#rownames(mat) <- colnames(mat)
#colnames(mat) <- 1:10
#select_neighbor("10010",mat,run.bestn = TRUE, run.threshold = TRUE,para = list(threshold = 0.3,n = 7))
select_neighbor(1110, ms_vec_weight,
run.threshold = T,
run.bestn = T,
para = list(threshold = 0.3,n = 2))
select_neighbor(10788, ms_vec_weight,
run.threshold = T,
run.bestn = T,
para = list(threshold = 0.3,n = 2))
select_neighbor('10788', ms_vec_weight,
run.threshold = T,
run.bestn = T,
para = list(threshold = 0.3,n = 2))
userid = 10788
weight_mat = ms_vec_weight
run.threshold=T
run.bestn=T
para = list(threshold = 0.3,n = 2)
if(is.null(rownames(weight_mat))) rownames(weight_mat) <- colnames(weight_mat)
if(is.null(colnames(weight_mat))) colnames(weight_mat) <- rownames(weight_mat)
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
which(rownames(weight_mat) != userid)
userid
weight_mat[which(rownames(weight_mat) != userid),userid]
userid = '10788'
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
vec
vec <- vec[abs(vec) > para$threshold]
vec
abs(vec)
abs(vec)
vec
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
vec
abs(vec)
abs(vec) > para$threshold
which(abs(vec) > para$threshold)
# load output data
load('../output/ms_msd_weight.RData')
ms_msd_dissimilar <- ms_msd_weight
max(ms_msd_dissimilar)
min(ms_msd_dissimilar)
# convert dissimilarity to similarity weight
ms_msd_weight <- (max(ms_msd_dissimilar) - ms_msd_weight ) /( max(ms_msd_dissimilar) - min(ms_msd_dissimilar) )
max(ms_msd_weight)
min(ms_msd_weight)
# save output in RData
if(save.rd == TRUE) save(ms_msd_weight, file = '../output/ms_msd_weight.RData')
save(ms_msd_weight, file = '../output/ms_msd_weight.RData')
# load output data
load('../output/ms_msd_weight.RData')
# load output data
load('../output/ms_msd_weight.RData')
ms_msd_dissimilar <- ms_msd_weight
a
# convert dissimilarity to similarity weight
ms_msd_weight <- (max(ms_msd_dissimilar) - ms_msd_dissimilar ) /
( max(ms_msd_dissimilar) - min(ms_msd_dissimilar) )
save(ms_msd_weight, file = '../output/ms_msd_weight.RData')
# load output data
load('../output/movie_msd_weight.RData')
movie_msd_dissimilar <- movie_msd_weight
# convert dissimilarity to similarity weight
movie_msd_weight <- (max(movie_msd_dissimilar) - movie_msd_dissimilar ) /
( max(movie_msd_dissimilar) - min(movie_msd_dissimilar) )
save(movie_msd_weight, file = '../output/movie_msd_weight.RData')
userid = '10010'
select_neighbor <- function(userid, weight_mat,
run.threshold = FALSE,
run.bestn = FALSE,
para = list(threshold = 0.3,n = 10)){
if(is.null(rownames(weight_mat))) rownames(weight_mat) <- colnames(weight_mat)
if(is.null(colnames(weight_mat))) colnames(weight_mat) <- rownames(weight_mat)
if (run.bestn == TRUE & run.threshold == FALSE){
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
name_v <- names(sort(vec,decreasing = T))[1:para$n]
} else if (run.bestn == FALSE & run.threshold == TRUE){
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
name_v <- names(abs(vec) > para$threshold)
} else if (run.bestn == TRUE & run.threshold == TRUE){
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
vec <- vec[abs(vec) > para$threshold]
name_v <- names(sort(vec,decreasing = T))[1:min(para$n,length(vec))]
}
return(name_v)
}
#mat <- readRDS("ms_vec_train.RData")
#rownames(mat) <- colnames(mat)
#colnames(mat) <- 1:10
#select_neighbor("10010",mat,run.bestn = TRUE, run.threshold = TRUE,para = list(threshold = 0.3,n = 7))
select_neighbor(userid,ms_vec_weight,T,F)
length(select_neighbor(userid,ms_vec_weight,T,F))
weight_mat = ms_vec_weight
range(ms_vec_weight)
summary(ms_vec_weight)
ms_vec_weight[1:5,]
uname(ms_vec_weight[1:5,])
unname(ms_vec_weight[1:5,])
unname(ms_vec_weight[1:5,1:5])
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
vec
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
vec
which(rownames(weight_mat) != userid
)
rownames(weight_mat)
if(is.null(rownames(weight_mat))) rownames(weight_mat) <- colnames(weight_mat)
if(is.null(colnames(weight_mat))) colnames(weight_mat) <- rownames(weight_mat)
which(rownames(weight_mat) != userid)
length(which(rownames(weight_mat) != userid))
length(which(abs(vec) > para$threshold))
name_v <- names(abs(vec) > para$threshold)
name_v
vec
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
vec
names(vec)
abs(vec)
abs(vec)>0.7
names(abs(vec)>0.7)
para$threshold=0.7
name_v <- names(abs(vec) > para$threshold)
name_v
name_v <- names(which(abs(vec) > para$threshold))
name_v
names(which(abs(vec) > para$threshold))
which(abs(vec) > para$threshold)
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
thresh.ind <- which(abs(vec) > para$threshold)
name_v <- names(vec)[thresh.ind]
name_v
thresh.ind
thresh.ind
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
thresh.ind <- which(abs(vec) > para$threshold)
name_v <- names(vec)[thresh.ind]
name_v
vec
thresh.ind <- which(abs(vec) > para$threshold)
thresh.ind
which(abs(vec) > para$threshold)
abs(vec)
para$threshold=0.3
thresh.ind <- which(abs(vec) > para$threshold)
name_v
vec <- weight_mat[which(rownames(weight_mat) != userid),userid]
thresh.ind <- which(abs(vec) > para$threshold)
name_v <- names(vec)[thresh.ind]
name_v
