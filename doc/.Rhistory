runApp('D:/Columbia/5243/Spring2018-Project2-Group3/app')
runApp('D:/Columbia/5243/Spring2018-Project2-Group3/app')
runApp('D:/Columbia/5243/Spring2018-Project2-Group3/app')
runApp('D:/Columbia/5243/Spring2018-Project2-Group3/app')
runApp('D:/Columbia/5243/Spring2018-Project2-Group3/app')
setwd("D:/WST/project/ABtest")
test <- read.csv("test_table.csv")
test <- read.csv("test_table.csv")
user <- read.csv("user_table.csv")
test <- read.csv("test_table.csv")
test <- read.csv("test_table.csv")
user <- read.csv("user_table.csv")
# user = user_tbl
# test = test_tbl
length(unique(user$user_id)) == length(user)
data = merge(test,user,by = 'user_id',all.x = TRUE)
data$date = as.Date(data$date)
summary(data)
data %>% group_by(country) %>% summarise(cr = mean(conversion[test==1])) %>% arrange(desc(cr))
library(dplyr)
data %>% group_by(country) %>% summarise(cr = mean(conversion[test==1])) %>% arrange(desc(cr))
data_test = subset(data,country!='Spain')
tree = rpart(test ~ ., data_test[,-8], control = rpart.control(minbucket=nrow(data_test)/100,maxdepth = 5))
library(rpart)
tree = rpart(test ~ ., data_test[,-8], control = rpart.control(minbucket=nrow(data_test)/100,maxdepth = 5))
tree
fit <- rpart(test ~. -conversion, test %>%
filter(country != "Spain"), control = rpart.control(
maxdepth = 5))
tree = rpart(test ~ ., data_test[,-8], control = rpart.control(maxdepth = 5))
tree
test_nspain <- test %>% filter(country != "Spain")
View(test)
dat <- full_join(test, user, by = "user_id")
dat <- dat %>%
filter(is.na(dat$country) == F)
fit <- rpart(test ~. -conversion, dat %>%filter(country != "Spain"), control = rpart.control(
maxdepth = 5))
fit
library(openxlsx)
dat <- read.xlsx(../5223/"companies.xlsx", 1)
dat <- read.xlsx(../5223/"companies.xlsx", 1)
dat <- read.xlsx(../"5223"/"companies.xlsx", 1)
setwd("D:/Columbia/5223")
dat <- read.xlsx("../5223/companies.xlsx", 1)
qqnorm(dat$Sales)
qqnorm(dat$Sales)
abline(0,1)
qqnorm(dat$Sales)
abline(1,0)
qqnorm(dat$Sales)
abline(1,0)
qqnorm(dat$Sales)
abline(0,1)
qqnorm(dat$Sales)
abline(0,1)
qqline(dat$Sales)
qqnorm(dat$Sales)
qqline(dat$Sales)
par(mfrow = c(1,3))
qqnorm(dat$Sales)
qqline(dat$Sales)
qqnorm(dat$Profits)
qqline(dat$Profits)
qqnorm(dat$Assets)
qqline(dat$Assets)
par(mfrow = c(1,3))
qqnorm(dat$Sales)
qqline(dat$Sales)
qqnorm(dat$Profits)
qqline(dat$Profits)
qqnorm(dat$Assets)
qqline(dat$Assets)
qqline(dat$Sales)
qqnorm(dat$Sales, main = "Sales")
qqline(dat$Sales)
qqnorm(dat$Sales, main = "Sales")
qqline(dat$Sales)
dat <- dat %>%
mutate(sale_n = ln(Sales)) %>%
mutate(profit_n = (Profits/1000)^2) %>%
mutate(asset_n = ln(Assets))
library(dplyr)
dat <- dat %>%
mutate(sale_n = log(Sales)) %>%
mutate(profit_n = (Profits/1000)^2) %>%
mutate(asset_n = log(Assets))
View(dat)
apply(dat[:5:7], 2, qqnorm)
apply(dat[,5:7], 2, qqnorm)
par(mfrow = c(1,3))
apply(dat[,5:7], 2, qqnorm)
apply(dat[,5:7], 2, qqnorm)
apply(dat[,5:7], 2, qqline)
boxcox(Sales~1, data = dat)
library(MASS)
boxcox(Sales~1, data = dat)
library(MASS)
par(mfrow = c(1,3))
boxcox(Sales~1, data = dat)
boxcox(Profits~1, data = dat)
boxcox(Assets~1, data = dat)
summary(powerTransform(dat[,2:4]))
library(car)
summary(powerTransform(dat[,2:4]))
testTransform(pt, c(0,2,0))
pt <- summary(powerTransform(dat[,2:4]))
pt
testTransform(pt, c(0,2,0))
pt <- powerTransform(dat[,2:4])
summary(pt)
testTransform(pt, c(0,2,0))
col <- read.csv("../5223/College.csv")
View(col)
apply(col, 2, qqnorm)
colnames(col) <- c("ssh", "verbal", "science")
col <- read.csv("../5223/College.csv")
colnames(col) <- c("ssh", "verbal", "science")
par(mfrow = c(1,3))
qqnorm(col[,1], main = "ssh")
qqline(col[,1])
qqnorm(col$verbal, main = "verbal")
qqline(col$verbal)
qqnorm(col$science, main = "science")
qqline(col$science)
paris(~ssh+verbal+science, data = col)
pairs(~ssh+verbal+science, data = col)
mu0 <- c(500, 50, 30)
?solve
1-pf((n-p)/((n-1)*p)*T2, df1 = p, df1 = p, df2 = n-p)
mu0 <- c(500, 50, 30)
n <- nrow(col)
p <- ncol(col)
xbar <- colMeans(col)
S <- cov(col)
T2 <- n*sum((xbar-mu0)*solve(S, xbar-mu0))
T2
1-pf((n-p)/((n-1)*p)*T2, df1 = p, df1 = p, df2 = n-p)
mu0 <- c(500, 50, 30)
n <- nrow(col)
p <- ncol(col)
xbar <- colMeans(col)
S <- cov(col)
T2 <- n*sum((xbar-mu0)*solve(S, xbar-mu0))
T2
1-pf((n-p)/((n-1)*p)*T2, df1 = p, df2 = n-p)
lum <- read.csv("../5223/Lumber.csv")
View(lum)
qqnorm(lum$stiff)
colnames(lum) <- c("stiff", "bend")
pairs(~stiff+bend, data = lum)
library(ellipse)
n <- nrow(lum)
size <- sqrt((n-1)*2/(n-2) * qf(.95, n-2))
size <- sqrt((n-1)*2/(n-2) * qf(.95,2, n-2))
xbar <- colMeans(lum)
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)")
library(ellipse)
n <- nrow(lum)
size <- sqrt((n-1)*2/(n-2) * qf(.95,2, n-2))
xbar <- colMeans(lum)
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)")
points(xbar)
xbar
points(x= xbar[1], y = xbar[2])
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)")
points(x= xbar[1], y = xbar[2])
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)")
points(x= 2000, y = 10,000)
points(x= 2000, y = 10,000)
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)")
points(x= 2000, y = 10,000)
library(ellipse)
n <- nrow(lum)
size <- sqrt((n-1)*2/(n-2) * qf(.95,2, n-2))
xbar <- colMeans(lum)
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)")
points(x= 2000, y = 10,000)
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)")
points(x = 2000, y = 10000)
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)", ylim = 11000)
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)")
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)", ylim = c(7400, 11000))
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)", ylim = c(7400, 11000))
points(x = 2000, y = 10000)
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)", ylim = c(7400, 10500))
points(x = 2000, y = 10000)
y <- seq(-7,10,.02)
dens <- 0.5*dnorm(y,1,2) + 0.5*dnorm(y,2,2)
plot (y, dens, ylim=c(0,1.1*max(dens)),
type="l", xlab="y", ylab="", xaxs="i",
yaxs="i", yaxt="n", bty="n", cex=2)
y <- seq(-5,8,.02)
dens <- 0.5*dnorm(y,1,2) + 0.5*dnorm(y,2,2)
plot (y, dens, ylim=c(0,1.1*max(dens)),
type="l", xlab="y", ylab="", xaxs="i",
yaxs="i", yaxt="n", bty="n", cex=2)
y <- seq(-4,7,.02)
dens <- 0.5*dnorm(y,1,2) + 0.5*dnorm(y,2,2)
plot (y, dens, ylim=c(0,1.1*max(dens)),
type="l", xlab="y", ylab="", xaxs="i",
yaxs="i", yaxt="n", bty="n", cex=2)
?dn
?dnorm
(0.5/dnorm(1, 1,2))/(0.5*(dnorm(1,1,2)+dnorm(1,2,2)))
?rbeta
a1 <- rbeta(n= 1000, shape1 = 295, shape2 = 308)
a2 <- rbeta(n= 1000, shape1 = 289, shape2 = 333)
diff <- a2-a1
hist(diff)
a1 <- rbeta(n= 1000, shape1 = 295, shape2 = 308)
a2 <- rbeta(n= 1000, shape1 = 289, shape2 = 333)
diff <- a2-a1
hist(diff)
par(mfrow = c(1,3))
qqnorm(dat$Sales, main = "Sales")
qqline(dat$Sales)
qqnorm(dat$Profits, main = "Profits")
qqline(dat$Profits)
qqnorm(dat$Assets, main = "Assets")
qqline(dat$Assets)
library(dplyr)
dat <- dat %>%
mutate(sale_n = log(Sales)) %>%
mutate(profit_n = (Profits/1000)^2) %>%
mutate(asset_n = log(Assets))
par(mfrow = c(1,3))
qqnorm(dat$sale_n, main = "Sales")
qqline(dat$sale_n)
qqnorm(dat$profit_n, main = "Profits")
qqline(dat$profit_n)
qqnorm(dat$asset_n, main = "Assets")
qqline(dat$asset_n)
library(MASS)
par(mfrow = c(1,3))
boxcox(Sales~1, data = dat)
boxcox(Profits~1, data = dat)
boxcox(Assets~1, data = dat)
?plot
plot(lum$stiff, lum$bend)
par(mfrow = c(1,3))
qqnorm(dat$Sales, main = "Sales")
qqline(dat$Sales)
qqnorm(dat$Profits, main = "Profits")
qqline(dat$Profits)
qqnorm(dat$Assets, main = "Assets")
qqline(dat$Assets)
par(mfrow = c(1,3))
qqnorm(dat$Sales, main = "Sales")
qqline(dat$Sales)
qqnorm(dat$Profits, main = "Profits")
qqline(dat$Profits)
qqnorm(dat$Assets, main = "Assets")
qqline(dat$Assets)
par(mfrow = c(1,3))
qqnorm(dat$Sales, main = "Sales")
qqline(dat$Sales)
qqnorm(dat$Profits, main = "Profits")
qqline(dat$Profits)
qqnorm(dat$Assets, main = "Assets")
qqline(dat$Assets)
par(mfrow = c(1,3))
qqnorm(dat$Sales, main = "Sales")
qqline(dat$Sales)
qqnorm(dat$Profits, main = "Profits")
qqline(dat$Profits)
qqnorm(dat$Assets, main = "Assets")
qqline(dat$Assets)
par(mfrow = c(1,3))
qqnorm(dat$Sales, main = "Sales")
qqline(dat$Sales)
qqnorm(dat$Profits, main = "Profits")
qqline(dat$Profits)
qqnorm(dat$Assets, main = "Assets")
qqline(dat$Assets)
plot(lum$stiff, lum$bend)
plot(lum$stiff, lum$bend)
library(ellipse)
n <- nrow(lum)
size <- sqrt((n-1)*2/(n-2) * qf(.95,2, n-2))
xbar <- colMeans(lum)
plot(ellipse(x = (1/n)*cov(lum), centre = xbar, t = size),
type = "l",xlab = "mu1", ylab = "mu2",
main = "95% confidence ellipse for (mu1, mu2)", ylim = c(7400, 10500))
points(x = 2000, y = 10000)
lum <- read.csv("../5223/Lumber.csv")
colnames(lum) <- c("stiff", "bend")
par(mfrow = c(1,2))
qqnorm(lum$stiff, main = "Stiffness")
qqline(lum$stiff)
qqnorm(lum$bend, main = "Bending")
qqline(lum$bend)
lum <- read.csv("../5223/Lumber.csv")
colnames(lum) <- c("stiff", "bend")
par(mfrow = c(1,2))
qqnorm(lum$stiff, main = "Stiffness")
qqline(lum$stiff)
qqnorm(lum$bend, main = "Bending")
qqline(lum$bend)
lum <- read.csv("../5223/Lumber.csv")
colnames(lum) <- c("stiff", "bend")
par(mfrow = c(1,2))
qqnorm(lum$stiff, main = "Stiffness")
qqline(lum$stiff)
qqnorm(lum$bend, main = "Bending")
qqline(lum$bend)
X <- data.matrix(num)
num <- read.csv("Number_Parity.csv")
X <- data.matrix(num)
xbar <- colMeans(X)
S <- cov(X)
c1 <- c(-1, 1, 1, 0)
c2 <- c(-1, -1, 1, 1)
c3 <- c(-1, 1, 1, -1)
C <- cbind(c1, c2, c3)
n <- nrow(X)
p <- ncol(X)
C.xbar <- as.vector( C %*% xbar)
dim(C)
xbar
dim(xbar)
X <- as.matrix(num)
xbar <- colMeans(X)
dim(xbar)
xbar <- data.matrix(colMeans(X))
dim(xbar)
X <- data.matrix(num)
xbar <- colMeans(X)
S <- cov(X)
c1 <- c(-1, 1, 1, 0)
c2 <- c(-1, -1, 1, 1)
c3 <- c(-1, 1, 1, -1)
C <- rbind(c1, c2, c3)
n <- nrow(X)
p <- ncol(X)
C.xbar <- as.vector( C %*% xbar)
T2 <- n * sum(C.xbar * solve(C %*% S %*% t(C), C.xbar))
T2
1 - pf((n-p+1)/((n-1)*(p-1))*T2, df1=p-1, df2=n-p+1)
b1 <- c1
b2 <- c2
b3 <- c3
F.mult <- sqrt((n-1)*(p-1)/(n-p+1) * qf(.95,p-1,n-p+1))
sum(b1*xbar) + c(-1,1) * F.mult * sqrt(sum(b1 * S %*% b1) / n)
sum(b2*xbar) + c(-1,1) * F.mult * sqrt(sum(b2 * S %*% b2) / n)
sum(b3*xbar) + c(-1,1) * F.mult * sqrt(sum(b3 * S %*% b3) / n)
turtle <- read.csv("Turtles.csv")
X <- data.matrix(turtle)[,1:3]
X1 <- X[1:24, ]
X2 <- X[25:48, ]
n1 <- nrow(X1)
n2 <- nrow(X2)
p <- ncol(X1)
xbar1 <- colMeans(X1)
xbar2 <- colMeans(X2)
S1 <- cov(X1)
S2 <- cov(X2)
S <- 1/(n1 + n2 - 2) * ( (n1-1)*S1 + (n2-1)*S2 )
T2 <- 1/(1/n1 + 1/n2) * sum((xbar1 - xbar2) * solve(S, xbar1 - xbar2))
T2
1 - pf((n1+n2-p-1)/((n1+n2-2)*p)*T2, df1=p, df2=n1+n2-p-1)
X <- data.matrix(num)
xbar <- colMeans(X)
S <- cov(X)
c1 <- c(-1, 1, -1, 1)
c2 <- c(-1, -1, 1, 1)
c3 <- c(-1, 1, 1, -1)
C <- rbind(c1, c2, c3)
n <- nrow(X)
p <- ncol(X)
C.xbar <- as.vector( C %*% xbar)
T2 <- n * sum(C.xbar * solve(C %*% S %*% t(C), C.xbar))
T2
1 - pf((n-p+1)/((n-1)*(p-1))*T2, df1=p-1, df2=n-p+1)
round(p,3)
round(p)
p
p <- 1 - pf((n-p+1)/((n-1)*(p-1))*T2, df1=p-1, df2=n-p+1)
p
p.val <- 1 - pf((n-p+1)/((n-1)*(p-1))*T2, df1=p-1, df2=n-p+1)
X <- data.matrix(num)
xbar <- colMeans(X)
S <- cov(X)
c1 <- c(-1, 1, -1, 1)
c2 <- c(-1, -1, 1, 1)
c3 <- c(-1, 1, 1, -1)
C <- rbind(c1, c2, c3)
n <- nrow(X)
p <- ncol(X)
C.xbar <- as.vector( C %*% xbar)
T2 <- n * sum(C.xbar * solve(C %*% S %*% t(C), C.xbar))
T2
p.val <- 1 - pf((n-p+1)/((n-1)*(p-1))*T2, df1=p-1, df2=n-p+1)
p.val
round(p.val, 3)
b1 <- c1
b2 <- c2
b3 <- c3
F.mult <- sqrt((n-1)*(p-1)/(n-p+1) * qf(.95,p-1,n-p+1))
sum(b1*xbar) + c(-1,1) * F.mult * sqrt(sum(b1 * S %*% b1) / n)
sum(b2*xbar) + c(-1,1) * F.mult * sqrt(sum(b2 * S %*% b2) / n)
sum(b3*xbar) + c(-1,1) * F.mult * sqrt(sum(b3 * S %*% b3) / n)
rec <- read.csv("Track_Records.csv")
X <- data.matrix(rec[,-1])
n <- nrow(X)
p <- ncol(X)
R <- cor(X)
R
S <- cov(X)
E <- eigen(S)
E
xbar <- colMeans(X)
ones <- rep(1, n)
H.X <- X - ones %*% t(xbar)
s <- apply(X, 2, sd)
X.S <- sweep(H.X, 2, s, "/")
S.S <- cov(X.S)
L <- diag(eigen(S.S)$values)
diag(L)/sum(diag(L))
plot(cumsum(diag(L))/sum(diag(L)), type = "b", main = "Scree Plot for PCA")
eigen(S.S)$vectors[,1:2]
View(rec)
Z <- matrix(data = NA, nrow = n, ncol = p)
Z[,1] <- 100/rec[,2]
Z[,2] <- 200/rec[,3]
Z[,3] <- 400/rec[,4]
Z[,4] <- 800/(rec[,5]*60)
Z[,5] <- 1500/(rec[,6]*60)
Z[,6] <- 3000/(rec[,7]*60)
Z[,7] <- 42195/(rec[,8]*60)
zbar <- colMeans(Z)
H.Z <- Z - ones %*% t(zbar)
S.Z <- cor(H.Z)
L <- diag(eigen(S.Z)$values)
diag(L)/sum(diag(L))
plot(cumsum(diag(L))/sum(diag(L)), type = "b", main = "Scree Plot for PCA")
eigen(S.Z)$vectors[,1:2]
[,1:3]
turtle <- read.csv("Turtles.csv")
X <- data.matrix(turtle)[,1:3]
X1 <- X[1:24, ]
X2 <- X[25:48, ]
n1 <- nrow(X1)
n2 <- nrow(X2)
p <- ncol(X1)
xbar1 <- colMeans(X1)
xbar2 <- colMeans(X2)
S1 <- cov(X1)
S2 <- cov(X2)
S <- 1/(n1 + n2 - 2) * ( (n1-1)*S1 + (n2-1)*S2 )
T2 <- 1/(1/n1 + 1/n2) * sum((xbar1 - xbar2) * solve(S, xbar1 - xbar2))
T2
1 - pf((n1+n2-p-1)/((n1+n2-2)*p)*T2, df1=p, df2=n1+n2-p-1)
xbar <- xbar1 - xbar2
alpha <- 0.05
xbar[1] + c(-1, 1)*qt(1-alpha/(2*p), n1*2-2)*sqrt((2/n1)*var(X$x1))
View(X)
xbar[1] + c(-1, 1)*qt(1-alpha/(2*p), n1*2-2)*sqrt((2/n1)*var(X[,1]))
xbar[2] + c(-1, 1)*qt(1-alpha/(2*p), n1*2-2)*sqrt((2/n1)*var(X[,2]))
xbar[3] + c(-1, 1)*qt(1-alpha/(2*p), n1*2-2)*sqrt((2/n1)*var(X[,3]))
library(earth)
install.packages("earth")
library(earth)
data("etitanic")
summary(etitanic)
data("etitanic")
library("earth", lib.loc="~/R/win-library/3.4")
install.packages("plotmo")
library(earth)
library(plotmo)
install.packages("plotmo")
library(earth)
data("etitanic")
summary(etitanic)
barplot(c(male.survival.rate,female.survival.rate), xlab="Gender", ylab="Survival rate", main = "Survival rate by gender",names.arg = c("Male","Female"))
View(etitanic)
#head(etitanic)
male.survival <- length(which(etitanic$survived==1 & etitanic$sex=="male"))
male <- length(which(etitanic$sex=="male"))
(male.survival.rate <- male.survival/male)
female.survival <- length(which(etitanic$survived==1 & etitanic$sex=="female"))
female <- length(which(etitanic$sex=="female"))
(female.survival.rate <- female.survival/female)
barplot(c(male.survival.rate,female.survival.rate), xlab="Gender", ylab="Survival rate", main = "Survival rate by gender",names.arg = c("Male","Female"))
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
source("../lib/GetOccurence.R")
setwd("~/GitHub/Spring2018-Project4-group3/doc")
